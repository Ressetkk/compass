// Code generated by mockery v2.2.1. DO NOT EDIT.

package automock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
)

// BundleReferenceService is an autogenerated mock type for the BundleReferenceService type
type BundleReferenceService struct {
	mock.Mock
}

// CreateByReferenceObjectID provides a mock function with given fields: ctx, in, objectType, objectID, bundleID
func (_m *BundleReferenceService) CreateByReferenceObjectID(ctx context.Context, in model.BundleReferenceInput, objectType model.BundleReferenceObjectType, objectID *string, bundleID *string) error {
	ret := _m.Called(ctx, in, objectType, objectID, bundleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.BundleReferenceInput, model.BundleReferenceObjectType, *string, *string) error); ok {
		r0 = rf(ctx, in, objectType, objectID, bundleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByReferenceObjectID provides a mock function with given fields: ctx, objectType, objectID, bundleID
func (_m *BundleReferenceService) DeleteByReferenceObjectID(ctx context.Context, objectType model.BundleReferenceObjectType, objectID *string, bundleID *string) error {
	ret := _m.Called(ctx, objectType, objectID, bundleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.BundleReferenceObjectType, *string, *string) error); ok {
		r0 = rf(ctx, objectType, objectID, bundleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByReferenceObjectID provides a mock function with given fields: ctx, in, objectType, objectID, bundleID
func (_m *BundleReferenceService) UpdateByReferenceObjectID(ctx context.Context, in model.BundleReferenceInput, objectType model.BundleReferenceObjectType, objectID *string, bundleID *string) error {
	ret := _m.Called(ctx, in, objectType, objectID, bundleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.BundleReferenceInput, model.BundleReferenceObjectType, *string, *string) error); ok {
		r0 = rf(ctx, in, objectType, objectID, bundleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
