// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import (
	context "context"

	model "github.com/kyma-incubator/compass/components/director/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// BundleService is an autogenerated mock type for the BundleService type
type BundleService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, applicationID, in
func (_m *BundleService) Create(ctx context.Context, applicationID string, in model.BundleInput) (string, error) {
	ret := _m.Called(ctx, applicationID, in)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, model.BundleInput) string); ok {
		r0 = rf(ctx, applicationID, in)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.BundleInput) error); ok {
		r1 = rf(ctx, applicationID, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BundleService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *BundleService) Get(ctx context.Context, id string) (*model.Bundle, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Bundle
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Bundle); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Bundle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForPackage provides a mock function with given fields: ctx, id, packageID
func (_m *BundleService) GetForPackage(ctx context.Context, id string, packageID string) (*model.Bundle, error) {
	ret := _m.Called(ctx, id, packageID)

	var r0 *model.Bundle
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Bundle); ok {
		r0 = rf(ctx, id, packageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Bundle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, packageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForPackage provides a mock function with given fields: ctx, packageID, pageSize, cursor
func (_m *BundleService) ListForPackage(ctx context.Context, packageID string, pageSize int, cursor string) (*model.BundlePage, error) {
	ret := _m.Called(ctx, packageID, pageSize, cursor)

	var r0 *model.BundlePage
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) *model.BundlePage); ok {
		r0 = rf(ctx, packageID, pageSize, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BundlePage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) error); ok {
		r1 = rf(ctx, packageID, pageSize, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, in
func (_m *BundleService) Update(ctx context.Context, id string, in model.BundleInput) error {
	ret := _m.Called(ctx, id, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.BundleInput) error); ok {
		r0 = rf(ctx, id, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
