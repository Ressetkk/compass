{{ $outerScope := . }}
{{- range $tenantFetcherName, $config := .Values.global.tenantFetchers -}}
{{ if eq $config.enabled true }}
{{ $configmapName := printf "%s-tenant-fetcher-%s-config" $.Chart.Name $tenantFetcherName }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "{{ $.Chart.Name }}-tenant-fetcher-{{ $tenantFetcherName }}"
  labels:
    app: {{ $.Chart.Name }}
    release: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" $outerScope }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
spec:
  schedule: "{{ $config.schedule }}"
  failedJobsHistoryLimit: 5
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 60 # Fix for https://github.com/kyma-incubator/compass/issues/1155
  jobTemplate:
    metadata:
      labels:
        cronjob: tenant-fetcher
    spec:
      template:
        metadata:
          labels:
            cronjob: tenant-fetcher
        spec:
          serviceAccountName: {{ $.Chart.Name }}-tenant-fetcher-job-{{ $tenantFetcherName }}
          containers:
          - name: fetcher
            image: {{ $.Values.global.images.containerRegistry.path }}/{{ $.Values.global.images.director.dir }}compass-director:{{ $.Values.global.images.director.version }}
            imagePullPolicy: IfNotPresent
            env:
              - name: USE_KUBERNETES
                value: "true"
              - name: KUBERNETES_POLL_INTERVAL
                value: {{ $config.kubernetes.pollInterval }}
              - name: KUBERNETES_POLL_TIMEOUT
                value: {{ $config.kubernetes.pollTimeout }}
              - name: KUBERNETES_TIMEOUT
                value: {{ $config.kubernetes.timeout }}
              - name: DB_USER
                valueFrom:
                  secretKeyRef:
                    name: compass-postgresql
                    key: postgresql-director-username
              - name: DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: compass-postgresql
                    key: postgresql-director-password
              - name: DB_HOST
                valueFrom:
                  secretKeyRef:
                    name: compass-postgresql
                    key: postgresql-serviceName
              - name: DB_PORT
                valueFrom:
                  secretKeyRef:
                    name: compass-postgresql
                    key: postgresql-servicePort
              - name: DB_NAME
                valueFrom:
                  secretKeyRef:
                    name: compass-postgresql
                    key: postgresql-director-db-name
              - name: DB_SSL
                valueFrom:
                  secretKeyRef:
                    name: compass-postgresql
                    key: postgresql-sslMode
              - name: DB_MAX_OPEN_CONNECTIONS
                value: "{{ $config.dbPool.maxOpenConnections }}"
              - name: DB_MAX_IDLE_CONNECTIONS
                value: "{{ $config.dbPool.maxIdleConnections }}"
              - name: ENDPOINT_TENANT_CREATED
                value: {{ $config.endpoints.tenantCreated }}
              - name: ENDPOINT_TENANT_DELETED
                value: {{ $config.endpoints.tenantDeleted }}
              - name: ENDPOINT_TENANT_UPDATED
                value: {{ $config.endpoints.tenantUpdated }}
              - name: TENANT_PROVIDER
                value: {{ $config.providerName }}
              - name: CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    name: compass-tenant-fetcher-secret-{{ $tenantFetcherName }}
                    key: oauth-client
              - name: CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: compass-tenant-fetcher-secret-{{ $tenantFetcherName }}
                    key: oauth-secret
              - name: OAUTH_TOKEN_ENDPOINT
                valueFrom:
                  secretKeyRef:
                    name: compass-tenant-fetcher-secret-{{ $tenantFetcherName }}
                    key: oauth-token-endpoint
              - name: LAST_EXECUTION_TIME_CONFIG_MAP_NAME
                value: {{ $configmapName }}
              - name: CONFIGMAP_NAMESPACE
                value: {{ $config.kubernetes.configMapNamespace }}
              - name: CONFIGMAP_TIMESTAMP_FIELD
                value: "lastConsumedTenantTimestamp"
              - name: MAPPING_FIELD_ID
                value: {{ $config.fieldMapping.idField }}
              - name: MAPPING_FIELD_NAME
                value: {{ $config.fieldMapping.nameField }}
              - name: MAPPING_FIELD_DISCRIMINATOR
                value: {{ $config.fieldMapping.discriminatorField }}
              - name: MAPPING_VALUE_DISCRIMINATOR
                value: {{ $config.fieldMapping.discriminatorValue }}
              - name: MAPPING_FIELD_DETAILS
                value: {{ $config.fieldMapping.detailsField}}
              - name: TENANT_TOTAL_PAGES_FIELD
                value: {{ $config.fieldMapping.totalPagesField}}
              - name: TENANT_TOTAL_RESULTS_FIELD
                value: {{ $config.fieldMapping.totalResultsField}}
              - name: TENANT_EVENTS_FIELD
                value: {{ $config.fieldMapping.tenantEventsField}}
              - name: QUERY_PAGE_NUM_FIELD
                value: {{ $config.queryMapping.pageNumField}}
              - name: QUERY_PAGE_SIZE_FIELD
                value: {{ $config.queryMapping.pageSizeField}}
              - name: QUERY_TIMESTAMP_FIELD
                value: {{ $config.queryMapping.timestampField}}
              - name: QUERY_PAGE_START
                value: "{{ $config.query.startPage}}"
              - name: QUERY_PAGE_SIZE
                value: "{{ $config.query.pageSize}}"
            {{ if and ($.Values.global.metrics.enabled) ($.Values.global.metrics.pushEndpoint) }}
              - name: METRICS_PUSH_ENDPOINT
                value: {{ $.Values.global.metrics.pushEndpoint}}
            {{ end }}
            command:
              - "/bin/sh"
            args:
              - "-c"
              - "./tenantfetcher; exit_code=$?; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
          {{if eq $.Values.global.database.embedded.enabled false}}
          - name: cloudsql-proxy
            image: gcr.io/cloudsql-docker/gce-proxy:1.19.1-alpine
            command:
              - /bin/sh
            args:
              - -c
              - "trap 'exit 0' SIGINT; echo 'Waiting for istio-proxy to start...' && sleep 15; /cloud_sql_proxy -instances={{ $.Values.global.database.managedGCP.instanceConnectionName }}=tcp:5432 -credential_file=/secrets/cloudsql-instance-credentials/credentials.json -term_timeout=2s"
            volumeMounts:
              - name: cloudsql-instance-credentials
                mountPath: /secrets/cloudsql-instance-credentials
                readOnly: true
          {{end}}
          restartPolicy: Never
          shareProcessNamespace: true
          {{if eq $.Values.global.database.embedded.enabled false}}
          volumes:
          - name: cloudsql-instance-credentials
            secret:
              secretName: cloudsql-instance-credentials
          {{end}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $configmapName }}
  namespace: "{{ $config.kubernetes.configMapNamespace }}"
  labels:
    app: {{ $.Chart.Name }}
    release: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" $outerScope }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
  {{- $configmap := (lookup "v1" "ConfigMap" $config.kubernetes.configMapNamespace $configmapName) }}
  {{- if empty $configmap }}
data:
  lastConsumedTenantTimestamp: "1"
  {{ else }}
data:
  {{ toYaml $configmap.data | indent 2}}
  {{ end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $.Chart.Name }}-tenant-fetcher-job-{{ $tenantFetcherName }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app: {{ $.Chart.Name }}
    release: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" $outerScope }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $configmapName }}
  namespace: {{ $config.kubernetes.configMapNamespace }}
  labels:
    app: {{ $.Chart.Name }}
    release: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" $outerScope }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
rules:
  - apiGroups: ["*"]
    resources: ["configmaps"]
    resourceNames: [{{ $configmapName }}]
    verbs: ["get", "update"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $.Chart.Name }}-tenant-fetcher-{{ $tenantFetcherName }}-config
  namespace: {{ $config.kubernetes.configMapNamespace }}
  labels:
    app: {{ $.Chart.Name }}
    release: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "_" }}
    app.kubernetes.io/name: {{ template "name" $outerScope }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
subjects:
  - kind: ServiceAccount
    name: {{ $.Chart.Name }}-tenant-fetcher-job-{{ $tenantFetcherName }}
    namespace: {{ $.Release.Namespace }}
roleRef:
  kind: Role
  name: {{ $configmapName }}
  apiGroup: rbac.authorization.k8s.io
{{ end }}
{{- end -}}